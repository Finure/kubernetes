apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: github-webhook-listener
  namespace: tekton-pipelines
spec:
  serviceAccountName: tekton
  triggers:
    - name: github-pr-trigger
      interceptors:
        - name: "github"
          ref:
            name: "github"
          params:
            - name: "secretRef"
              value:
                secretName: tekton-github
                secretKey: secretToken
            - name: "eventTypes"
              value: ["pull_request"]
        - name: cel
          ref:
            name: cel
          params:
            - name: filter
              value: >
                body.action in ['opened', 'synchronize', 'reopened'] &&
                body.pull_request.head.ref.startsWith('feature/')
      bindings:
        - ref: github-pr-binding
      template:
        ref: pipeline-template
    - name: github-push-trigger
      interceptors:
        - name: "github"
          ref:
            name: "github"
          params:
            - name: "secretRef"
              value:
                secretName: tekton-github
                secretKey: secretToken
            - name: "eventTypes"
              value: ["push"]
        - name: cel
          ref:
            name: cel
          params:
            - name: filter
              value: >
                body.ref.startsWith('refs/heads/') &&
                !body.ref.startsWith('refs/heads/feature/')
      bindings:
        - ref: github-push-binding
      template:
        ref: pipeline-template
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-pr-binding
  namespace: tekton-pipelines
spec:
  params:
    - name: url
      value: $(body.pull_request.head.repo.clone_url)
    - name: revision
      value: $(body.pull_request.head.sha)
    - name: git-branch
      value: $(body.pull_request.head.ref)
    - name: target-branch
      value: $(body.pull_request.base.ref)
    - name: repo-name
      value: $(body.repository.name)
    - name: repo-owner
      value: $(body.repository.owner.login)
    - name: repo-full-name
      value: $(body.repository.full_name)
    - name: pr-number
      value: $(body.pull_request.number)
    - name: event-type
      value: "pull_request"
    - name: pipeline-mode
      value: "ci"
    - name: pr-title
      value: $(body.pull_request.title)
    - name: pr-author
      value: $(body.pull_request.user.login)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-push-binding
  namespace: tekton-pipelines
spec:
  params:
    - name: url
      value: $(body.repository.clone_url)
    - name: revision
      value: $(body.after)
    - name: git-branch
      value: $(body.ref)
    - name: target-branch
      value: $(body.ref)
    - name: repo-name
      value: $(body.repository.name)
    - name: repo-owner
      value: $(body.repository.owner.login)
    - name: repo-full-name
      value: $(body.repository.full_name)
    - name: pr-number
      value: ""
    - name: event-type
      value: "push"
    - name: pipeline-mode
      value: "cd"
    - name: pr-title
      value: ""
    - name: pr-author
      value: $(body.pusher.name)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: pipeline-template
  namespace: tekton-pipelines
spec:
  params:
    - name: url
    - name: revision
    - name: git-branch
    - name: target-branch
    - name: repo-name
    - name: repo-owner
    - name: repo-full-name
    - name: pr-number
      default: ""
    - name: event-type
    - name: pipeline-mode
    - name: pr-title
    - name: pr-author

  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        generateName: test
        namespace: tekton-pipelines
      spec:
        taskRunTemplate:
          serviceAccountName: tekton
          podTemplate:
            securityContext:
              fsGroup: 65532
        pipelineRef:
          name: pipeline
        serviceAccountName: tekton
        params:
          - name: url
            value: $(tt.params.url)
          - name: revision
            value: $(tt.params.revision)
          - name: git-branch
            value: $(tt.params.git-branch)
          - name: target-branch
            value: $(tt.params.target-branch)
          - name: repo-name
            value: $(tt.params.repo-name)
          - name: repo-owner
            value: $(tt.params.repo-owner)
          - name: repo-full-name
            value: $(tt.params.repo-full-name)
          - name: pr-number
            value: $(tt.params.pr-number)
          - name: event-type
            value: $(tt.params.event-type)
          - name: pipeline-mode
            value: $(tt.params.pipeline-mode)
          - name: pr-title
            value: $(tt.params.pr-title)
          - name: pr-author
            value: $(tt.params.pr-author)
          - name: registry-url
            value: "ghcr.io"
          - name: dockerfile-path
            value: "./Dockerfile"
          - name: lint-requirements-file
            value: "app/requirements.txt"
          - name: lint-path
            value: "."
        workspaces:
          - name: shared-workspace
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi
          - name: github
            secret:
              secretName: tekton-github
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: pipeline
  namespace: tekton-pipelines
spec:
  params:
    - name: url
      type: string
    - name: revision
      type: string
    - name: git-branch
      type: string
    - name: target-branch
      type: string
    - name: repo-name
      type: string
    - name: repo-owner
      type: string
    - name: repo-full-name
      type: string
    - name: pr-number
      type: string
      default: ""
    - name: event-type
      type: string
    - name: pipeline-mode
      type: string
    - name: pr-title
      type: string
      default: ""
    - name: pr-author
      type: string
      default: ""
    - name: registry-url
      type: string
      default: "ghcr.io"
    - name: dockerfile-path
      type: string
      default: "./Dockerfile"
    - name: lint-requirements-file
      type: string
      default: "app/requirements.txt"
    - name: lint-path
      type: string
      default: "."

  workspaces:
    - name: shared-workspace
    - name: github

  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.url)
        - name: revision
          value: $(params.revision)
        - name: submodules
          value: "true"
        - name: depth
          value: "1"
        - name: deleteExisting
          value: "true"
        - name: verbose
          value: "true"
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: github
          workspace: github

    - name: lint-code
      taskRef:
        name: flake8
        kind: Task
      params:
        - name: path
          value: $(params.lint-path)
        - name: requirements_file
          value: $(params.lint-requirements-file)
        - name: args
          value: ["--max-line-length=150"]
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
      runAfter:
        - git-clone

    - name: determine-semantic-version
      taskRef:
        name: determine-semantic-version
        kind: Task
      params:
        - name: git-branch
          value: $(params.git-branch)
        - name: target-branch
          value: $(params.target-branch)
        - name: event-type
          value: $(params.event-type)
        - name: pipeline-mode
          value: $(params.pipeline-mode)
        - name: pr-number
          value: $(params.pr-number)
        - name: repo-name
          value: $(params.repo-name)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: github
          workspace: github
      runAfter:
        - lint-code

    - name: dynamic-path-determiner
      taskRef:
        name: dynamic-path-determiner
        kind: Task
      params:
        - name: target-branch
          value: $(params.target-branch)
        - name: repo-name
          value: $(params.repo-name)
        - name: pipeline-mode
          value: $(params.pipeline-mode)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
      runAfter:
        - determine-semantic-version
      when:
        - input: "$(params.pipeline-mode)"
          operator: in
          values: ["cd"]

    - name: build-push-image
      taskRef:
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: "$(params.registry-url)/$(params.repo-owner)/$(params.repo-name):$(tasks.determine-semantic-version.results.version)"
        - name: DOCKERFILE
          value: $(params.dockerfile-path)
        - name: CONTEXT
          value: .
        - name: git-branch
          value: $(params.git-branch)
        - name: repo-name
          value: $(params.repo-name)
        - name: repo-owner
          value: $(params.repo-owner)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: tekton-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.revision)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: github
          workspace: github
      runAfter:
        - dynamic-path-determiner
      when:
        - input: "$(params.pipeline-mode)"
          operator: in
          values: ["cd"]

    - name: update-helm-chart
      taskRef:
        name: update-helm-chart
        kind: Task
      params:
        - name: image-tag
          value: "$(tasks.determine-semantic-version.results.version)"
        - name: helm-chart-path
          value: "$(tasks.dynamic-path-determiner.results.chart-file-path)"
        - name: values-file-path
          value: "$(tasks.dynamic-path-determiner.results.values-file-path)"
        - name: git-branch
          value: $(params.git-branch)
        - name: repo-name
          value: $(params.repo-name)
        - name: repo-owner
          value: $(params.repo-owner)
        - name: event-type
          value: $(params.event-type)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: github
          workspace: github
      runAfter:
        - build-push-image
      when:
        - input: "$(params.pipeline-mode)"
          operator: in
          values: ["cd"]
  finally:
    - name: report-pipeline-failed-to-github
      when:
        - input: $(tasks.status)
          operator: in
          values: [ "Failed", "None" ]
      taskRef:
        name: github-set-status
      params:
        - name: STATE
          value: failed
        - name: GITHUB_HOST_URL
          value: "https://api.github.com"
        - name: REPO_FULL_NAME
          value: $(params.repo-full-name)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: tekton-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.revision)
        - name: TARGET_URL
          value: "https://tekton-dashboard.example.com/#/namespaces/default/pipelineruns/$(context.pipelineRun.name)"
        - name: CONTEXT
          value: tekton-pipeline
        - name: DESCRIPTION
          value: "An error occurred building your commit in Tekton"

    - name: report-pipeline-success-to-github
      when:
        - input: $(tasks.status)
          operator: in
          values: [ "Succeeded", "Completed" ]
      taskRef:
        name: github-set-status
      params:
        - name: STATE
          value: success
        - name: GITHUB_HOST_URL
          value: api.github.com
        - name: REPO_FULL_NAME
          value: $(params.repo-full-name)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: tekton-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.revision)
        - name: TARGET_URL
          value: "https://tekton-dashboard.example.com/#/namespaces/default/pipelineruns/$(context.pipelineRun.name)"
        - name: CONTEXT
          value: tekton-pipeline
        - name: DESCRIPTION
          value: "Finished building your commit in Tekton"
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: determine-semantic-version
  namespace: tekton-pipelines
spec:
  params:
    - name: git-branch
      type: string
    - name: pr-number
      type: string
      default: ""
    - name: pipeline-mode
      type: string
    - name: repo-name
      type: string
    - name: userHome
      description: |
        Absolute path to the user's home directory.
      type: string
      default: "/home/git"
  workspaces:
    - name: shared-workspace
    - name: github
  results:
    - name: version
      description: The semantic version to use
    - name: version-type
      description: The type of version (release, prerelease, development)
  steps:
    - name: determine-version
      image: alpine/semver:7.5.4
      env:
      - name: HOME
        value: "$(params.userHome)"
      workingDir: $(workspaces.shared-workspace.path)
      script: |
        #!/bin/sh
        set -e
        # Install dependencies and configure git
        apk add --no-cache git curl jq 
        git config --global --add safe.directory "$(workspaces.shared-workspace.path)"

        # Get latest tag from repo
        git fetch --unshallow || true
        git fetch origin main --tags
        LATEST_TAG=$(git tag --sort=-creatordate | head -n1)
        echo "LATEST: $LATEST_TAG"
        if [ -z "$LATEST_TAG" ]; then
            # No tag exists - use 1.0.0
            LATEST_TAG="1.0.0"
            BUMP_TYPE="initial"
            echo "No existing tag, using initial version: $LATEST_TAG"
        else
            echo "Latest version: $LATEST_TAG"
            
        MERGE_BASE=$(git merge-base "$LATEST_TAG" HEAD)

        if [ -z "$MERGE_BASE" ]; then
            echo "⚠️ Warning: No common ancestor found. Likely shallow clone. Falling back."
            # Fallback to linear log (may miss commits inside merges)
            MERGE_COMMIT=$(git log "$LATEST_TAG"..HEAD --pretty=format:"%s" --no-merges)
        else
            # Recommended full graph walk
            MERGE_COMMIT=$(git log "$MERGE_BASE"..HEAD --pretty=format:"%s" --no-merges)
        fi
        echo "$MERGE_COMMIT"

            if [ -n "$MERGE_COMMIT" ]; then
                # Determine bump type
                BUMP_TYPE=""
                if echo "$MERGE_COMMIT" | grep "(BREAKING CHANGE|!)"; then
                    BUMP_TYPE="major"
                elif echo "$MERGE_COMMIT" | grep "feat"; then
                    BUMP_TYPE="minor"
                elif echo "$MERGE_COMMIT" | grep "fix"; then
                    BUMP_TYPE="patch"
                fi
                
                if [ -n "$BUMP_TYPE" ]; then
                    # Calculate new version
                    IFS='.' read -r major minor patch << EOF
        $LATEST_TAG
        EOF
                    case "$BUMP_TYPE" in
                        major) NEW_VERSION="$((major + 1)).0.0" ;;
                        minor) NEW_VERSION="$major.$((minor + 1)).0" ;;
                        patch) NEW_VERSION="$major.$minor.$((patch + 1))" ;;
                    esac
                    echo "Bump type: $BUMP_TYPE"
                else
                    # No bump needed (chore, docs, etc.) - use existing tag
                    NEW_VERSION="$LATEST_TAG"
                    BUMP_TYPE="none"
                    echo "No version bump needed, using existing version"
                fi
            else
                # No commits since tag - use existing tag
                NEW_VERSION="$LATEST_TAG"
                BUMP_TYPE="none"
                echo "No commits since last tag, using existing version"
            fi
        fi

        echo "Final version: $NEW_VERSION"

        # Write results
        echo -n "$NEW_VERSION" > $(results.version.path)
        echo -n "$BUMP_TYPE" > $(results.version-type.path)
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dynamic-path-determiner
  namespace: tekton-pipelines
spec:
  params:
    - name: target-branch
      type: string
    - name: repo-name
      type: string
    - name: pipeline-mode
      type: string
  workspaces:
    - name: shared-workspace
  results:
    - name: values-file-path
    - name: chart-file-path
    - name: environment-name
  steps:
    - name: determine-paths
      image: alpine:latest
      script: |
        #!/bin/sh
        set -e
        apk add --no-cache git curl jq  
        git config --global --add safe.directory "$(workspaces.shared-workspace.path)"
        TARGET_BRANCH="$(params.target-branch)"
        REPO_NAME="$(params.repo-name)"
        PIPELINE_MODE="$(params.pipeline-mode)"
        CLEAN_BRANCH=$(echo "$TARGET_BRANCH" | sed 's|refs/heads/||')

        case "$CLEAN_BRANCH" in
            main|master)
                ENVIRONMENT="production"
                ;;
            *)
                ENVIRONMENT="$CLEAN_BRANCH"
                ;;
        esac

        VALUES_PATH="k8s/environments/$ENVIRONMENT/values.yaml"
        CHART_PATH="k8s/helm-charts/$REPO_NAME/Chart.yaml"

        echo "Environment: $ENVIRONMENT"
        echo "Values path: $VALUES_PATH"
        echo "Chart path: $CHART_PATH"

        echo -n "$VALUES_PATH" > $(results.values-file-path.path)
        echo "Wrote values path to: $(results.values-file-path.path)"
        echo -n "$CHART_PATH" > $(results.chart-file-path.path)
        echo "Wrote chart path to: $(results.chart-file-path.path)"
        echo -n "$ENVIRONMENT" > $(results.environment-name.path)
        echo "Wrote environment name to: $(results.environment-name.path)"
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-helm-chart
  namespace: tekton-pipelines
spec:
  params:
    - name: image-tag
      type: string
    - name: helm-chart-path
      type: string
    - name: values-file-path
      type: string
    - name: git-branch
      type: string
    - name: repo-name
      type: string
    - name: repo-owner
      type: string
    - name: event-type
      type: string
  workspaces:
    - name: shared-workspace
    - name: github
  steps:
    - name: update-helm-files
      image: alpine/git:latest
      workingDir: $(workspaces.shared-workspace.path)
      env:
        - name: HOME
          value: /tekton/home
      script: |
        #!/bin/sh
        set -e
        git config --global --add safe.directory "$(workspaces.shared-workspace.path)"
        # Install required tools
        apk add --no-cache curl
        curl -L https://github.com/mikefarah/yq/releases/download/v4.35.2/yq_linux_amd64 -o /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        
        # Configure git
        git config --global user.email "tekton-pipeline@ci.local"
        git config --global user.name "Tekton Pipeline"
        git config --global --add safe.directory $(workspaces.shared-workspace.path)
        
        # Parameters
        HELM_CHART_PATH="$(params.helm-chart-path)"
        VALUES_FILE_PATH="$(params.values-file-path)"
        IMAGE_TAG="$(params.image-tag)"
        REPO_NAME="$(params.repo-name)"
        REPO_OWNER="$(params.repo-owner)"
        
        echo "================================="
        echo "DYNAMIC HELM UPDATE"
        echo "================================="
        echo "Repository: $REPO_OWNER/$REPO_NAME"
        echo "Image Tag: $IMAGE_TAG"
        echo "Chart Path: $HELM_CHART_PATH"
        echo "Values Path: $VALUES_FILE_PATH"
        echo "================================="
        
        CHANGES_MADE=false
        
        # Update values.yaml if it exists
        if [ -f "$VALUES_FILE_PATH" ]; then
            echo "✓ Updating values.yaml..."
            
            # Check current tag value
            CURRENT_TAG=$(yq eval '.image.tag' "$VALUES_FILE_PATH" 2>/dev/null || echo "not found")
            echo "  - Current tag: $CURRENT_TAG"
            
            # Update the tag
            yq eval '.image.tag = "'"$IMAGE_TAG"'"' -i "$VALUES_FILE_PATH"
            
            # Verify the update
            NEW_TAG=$(yq eval '.image.tag' "$VALUES_FILE_PATH" 2>/dev/null || echo "failed")
            if [ "$NEW_TAG" = "$IMAGE_TAG" ]; then
                CHANGES_MADE=true
                echo "  - Image tag successfully updated to: $IMAGE_TAG"
            else
                echo "❌ Failed to update image tag"
                exit 1
            fi
        else
            echo "⚠ Values.yaml not found at: $VALUES_FILE_PATH"
            mkdir -p "$(dirname "$VALUES_FILE_PATH")"
            echo "image:" > "$VALUES_FILE_PATH"
            echo "  tag: $IMAGE_TAG" >> "$VALUES_FILE_PATH"
            CHANGES_MADE=true
            echo "  - Created values.yaml with image tag: $IMAGE_TAG"
        fi
        if [ -f "$HELM_CHART_PATH" ]; then
            echo "✓ Updating Chart.yaml..."

            # Check current version
            CURRENT_VERSION=$(yq eval '.version' "$HELM_CHART_PATH" 2>/dev/null || echo "not found")
            echo "  - Current version: $CURRENT_VERSION"

            # Update the version to IMAGE_TAG
            yq eval '.version = "'"$IMAGE_TAG"'"' -i "$HELM_CHART_PATH"

            # Verify the update
            NEW_VERSION=$(yq eval '.version' "$HELM_CHART_PATH" 2>/dev/null || echo "failed")
            if [ "$NEW_VERSION" = "$IMAGE_TAG" ]; then
                CHANGES_MADE=true
                echo "  - Chart version successfully updated to: $IMAGE_TAG"
            else
                echo "❌ Failed to update chart version"
                exit 1
            fi
        else
            echo "⚠ Chart.yaml not found at: $HELM_CHART_PATH"
            mkdir -p "$(dirname "$HELM_CHART_PATH")"
            echo "apiVersion: v2" > "$HELM_CHART_PATH"
            echo "name: $(basename "$(dirname "$HELM_CHART_PATH")")" >> "$HELM_CHART_PATH"
            echo "version: $IMAGE_TAG" >> "$HELM_CHART_PATH"
            CHANGES_MADE=true
            echo "  - Created Chart.yaml with version: $IMAGE_TAG"
        fi
        # Check if there are any changes to commit
        if [ "$CHANGES_MADE" = "false" ] || git diff --quiet; then
            echo "ℹ No changes to commit"
            exit 0
        fi
        
        # Show changes
        echo "================================="
        echo "CHANGES TO COMMIT:"
        echo "================================="
        git diff --name-only
        git diff
        
        # Commit and push changes
        git add .
        git commit -m "chore(helm): update $REPO_NAME to $IMAGE_TAG

        - Updated Chart.yaml version and appVersion
        - Updated values.yaml image.tag
        - Automated by Tekton Pipeline
        
        [skip ci]"
        
        # Push to the same branch
        BRANCH_NAME=$(echo "$(params.git-branch)" | sed 's|refs/heads/||')
        echo "🚀 Pushing changes to branch: $BRANCH_NAME"
        git push origin HEAD:$BRANCH_NAME
        